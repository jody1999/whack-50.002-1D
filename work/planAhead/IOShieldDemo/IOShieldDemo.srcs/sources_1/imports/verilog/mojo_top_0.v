/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg spi_miso,
    output reg [3:0] spi_channel,
    output reg avr_rx,
    input [7:0] button,
    output reg [6:0] display1,
    output reg [6:0] display2,
    output reg [6:0] display3,
    output reg [6:0] display4,
    output reg [7:0] light
  );
  
  
  
  wire [16-1:0] M_alumux_out;
  reg [16-1:0] M_alumux_mole;
  reg [16-1:0] M_alumux_score;
  reg [16-1:0] M_alumux_molemod;
  reg [16-1:0] M_alumux_scoreaddc;
  reg [1-1:0] M_alumux_asel;
  reg [1-1:0] M_alumux_bsel;
  alumux_1 alumux (
    .mole(M_alumux_mole),
    .score(M_alumux_score),
    .molemod(M_alumux_molemod),
    .scoreaddc(M_alumux_scoreaddc),
    .asel(M_alumux_asel),
    .bsel(M_alumux_bsel),
    .out(M_alumux_out)
  );
  
  reg rst;
  
  integer i;
  
  localparam TIMEOUT = 4'ha;
  
  reg [3:0] shiwei;
  
  reg [3:0] gewei;
  
  reg [3:0] scoreShiwei;
  
  reg [3:0] scoreGewei;
  
  wire [7-1:0] M_seg1_segs;
  reg [4-1:0] M_seg1_char;
  seven_seg_2 seg1 (
    .char(M_seg1_char),
    .segs(M_seg1_segs)
  );
  
  wire [7-1:0] M_seg2_segs;
  reg [4-1:0] M_seg2_char;
  seven_seg_2 seg2 (
    .char(M_seg2_char),
    .segs(M_seg2_segs)
  );
  
  wire [7-1:0] M_seg3_segs;
  reg [4-1:0] M_seg3_char;
  seven_seg_2 seg3 (
    .char(M_seg3_char),
    .segs(M_seg3_segs)
  );
  
  wire [7-1:0] M_seg4_segs;
  reg [4-1:0] M_seg4_char;
  seven_seg_2 seg4 (
    .char(M_seg4_char),
    .segs(M_seg4_segs)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_7 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [16-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_8 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [8-1:0] M_randomizer_result_8bit;
  reg [1-1:0] M_randomizer_ctr;
  lfsr_randomizer_9 randomizer (
    .clk(clk),
    .rst(rst),
    .ctr(M_randomizer_ctr),
    .result_8bit(M_randomizer_result_8bit)
  );
  wire [1-1:0] M_ctr_value;
  counter_10 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  reg [7:0] M_led_pattern_d, M_led_pattern_q = 1'h0;
  reg [7:0] M_temporaryMole_d, M_temporaryMole_q = 1'h0;
  reg [0:0] M_gameInitializer_d, M_gameInitializer_q = 1'h1;
  reg [7:0] M_buttonArray_d, M_buttonArray_q = 1'h0;
  reg [7:0] M_score_d, M_score_q = 1'h0;
  reg [7:0] M_moleLeft_d, M_moleLeft_q = 7'h63;
  reg [0:0] M_getRdmNum_d, M_getRdmNum_q = 1'h1;
  wire [8-1:0] M_buttons_button_pressed;
  reg [8-1:0] M_buttons_button;
  pushButton_11 buttons (
    .clk(clk),
    .rst(rst),
    .button(M_buttons_button),
    .button_pressed(M_buttons_button_pressed)
  );
  
  reg [6:0] M_timeCounter_d, M_timeCounter_q = 5'h14;
  
  localparam INITIAL_oState = 4'd0;
  localparam START_oState = 4'd1;
  localparam END_oState = 4'd2;
  localparam RESET_oState = 4'd3;
  localparam LEVEL1_oState = 4'd4;
  localparam LEVEL2_oState = 4'd5;
  localparam LEVEL3_oState = 4'd6;
  localparam LEVEL4_oState = 4'd7;
  localparam CHECK_oState = 4'd8;
  localparam CHECKM_oState = 4'd9;
  
  reg [3:0] M_oState_d, M_oState_q = INITIAL_oState;
  reg [31:0] M_halfsecond_d, M_halfsecond_q = 1'h0;
  
  always @* begin
    M_oState_d = M_oState_q;
    M_led_pattern_d = M_led_pattern_q;
    M_buttonArray_d = M_buttonArray_q;
    M_moleLeft_d = M_moleLeft_q;
    M_halfsecond_d = M_halfsecond_q;
    M_score_d = M_score_q;
    M_getRdmNum_d = M_getRdmNum_q;
    M_temporaryMole_d = M_temporaryMole_q;
    M_timeCounter_d = M_timeCounter_q;
    M_gameInitializer_d = M_gameInitializer_q;
    
    M_alumux_score = 8'h00;
    M_alumux_mole = 8'h00;
    M_alumux_scoreaddc = 4'h1;
    M_alumux_molemod = 4'ha;
    M_alumux_asel = 4'h0;
    M_alumux_bsel = 4'h0;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    display1 = 8'hff;
    display2 = 8'hff;
    display3 = 8'hff;
    display4 = 8'hff;
    M_edge_detector_in = M_ctr_value;
    M_dec_ctr_inc = M_edge_detector_out;
    shiwei = M_moleLeft_q / 4'ha;
    if (M_oState_q != CHECK_oState) begin
      M_alumux_mole = M_moleLeft_q;
      M_alumux_molemod = 4'ha;
      M_alumux_asel = 4'h1;
      M_alumux_bsel = 4'h1;
      gewei = M_alumux_out[0+3-:4];
    end else begin
      gewei = M_moleLeft_q - (M_moleLeft_q / 4'ha * 4'ha);
    end
    scoreShiwei = M_score_q / 4'ha;
    scoreGewei = M_score_q - (M_score_q / 4'ha * 4'ha);
    M_seg1_char = shiwei;
    M_seg2_char = gewei;
    M_seg3_char = scoreShiwei;
    M_seg4_char = scoreGewei;
    display1 = M_seg1_segs;
    display2 = M_seg2_segs;
    display3 = M_seg3_segs;
    display4 = M_seg4_segs;
    light[0+7-:8] = 1'h0;
    M_buttons_button[0+7-:8] = button[0+7-:8];
    M_randomizer_ctr = M_ctr_value;
    if (M_oState_q != START_oState) begin
      M_halfsecond_d = M_halfsecond_q + 1'h1;
      if (M_halfsecond_q >= 23'h4c4b40) begin
        M_timeCounter_d = M_timeCounter_q - 1'h1;
        M_halfsecond_d = 32'h00000000;
      end
    end
    for (i = 1'h0; i < 4'h8; i = i + 1) begin
      M_buttonArray_d[(i)*1+0-:1] = button[(i)*1+0-:1];
      light[(i)*1+0-:1] = M_led_pattern_q[(i)*1+0-:1];
    end
    
    case (M_oState_q)
      INITIAL_oState: begin
        M_temporaryMole_d = 8'h00;
        if (M_gameInitializer_q == 1'h1) begin
          M_led_pattern_d[0+0-:1] = 1'h1;
          M_led_pattern_d[1+0-:1] = 1'h1;
          M_led_pattern_d[2+0-:1] = 1'h1;
          M_led_pattern_d[3+0-:1] = 1'h1;
          M_led_pattern_d[4+0-:1] = 1'h1;
          M_led_pattern_d[5+0-:1] = 1'h1;
          M_led_pattern_d[6+0-:1] = 1'h1;
          M_led_pattern_d[7+0-:1] = 1'h1;
          M_timeCounter_d = 4'ha;
          M_gameInitializer_d = 1'h0;
        end
        if (button[0+7-:8] != 8'h00) begin
          M_oState_d = START_oState;
        end
      end
      START_oState: begin
        M_timeCounter_d = 4'ha;
        if (M_score_q < 3'h5) begin
          if (M_getRdmNum_q == 1'h1) begin
            M_led_pattern_d = {M_randomizer_result_8bit[5+0-:1], 1'h0, M_randomizer_result_8bit[3+0-:1], 1'h0, 1'h0, 1'h0, M_randomizer_result_8bit[1+0-:1], 1'h0};
            M_temporaryMole_d = {M_randomizer_result_8bit[5+0-:1], 1'h0, M_randomizer_result_8bit[3+0-:1], 1'h0, 1'h0, 1'h0, M_randomizer_result_8bit[1+0-:1], 1'h0};
            M_getRdmNum_d = 1'h0;
          end else begin
            M_oState_d = CHECKM_oState;
          end
        end else begin
          if (M_score_q < 5'h1e) begin
            if (M_getRdmNum_q == 1'h1) begin
              M_led_pattern_d = {M_randomizer_result_8bit[0+0-:1], 1'h0, M_randomizer_result_8bit[2+0-:1], 1'h0, M_randomizer_result_8bit[5+0-:1], M_randomizer_result_8bit[6+0-:1], 1'h0, M_randomizer_result_8bit[7+0-:1]};
              M_temporaryMole_d = {M_randomizer_result_8bit[0+0-:1], 1'h0, M_randomizer_result_8bit[2+0-:1], 1'h0, M_randomizer_result_8bit[5+0-:1], M_randomizer_result_8bit[6+0-:1], 1'h0, M_randomizer_result_8bit[7+0-:1]};
              M_getRdmNum_d = 1'h0;
            end else begin
              M_oState_d = CHECKM_oState;
            end
          end else begin
            if (M_score_q < 6'h3c) begin
              if (M_getRdmNum_q == 1'h1) begin
                M_led_pattern_d = M_randomizer_result_8bit;
                M_temporaryMole_d = M_randomizer_result_8bit;
                M_getRdmNum_d = 1'h0;
              end else begin
                M_oState_d = CHECKM_oState;
              end
            end else begin
              if (M_getRdmNum_q == 1'h1) begin
                M_led_pattern_d = M_randomizer_result_8bit;
                M_temporaryMole_d = M_randomizer_result_8bit;
                M_getRdmNum_d = 1'h0;
              end else begin
                M_oState_d = CHECKM_oState;
              end
            end
          end
        end
      end
      CHECKM_oState: begin
        if (M_moleLeft_q <= 1'h0) begin
          M_oState_d = END_oState;
        end else begin
          if (M_temporaryMole_q[0+7-:8] == 8'h01 | M_temporaryMole_q[0+7-:8] == 8'h02 | M_temporaryMole_q[0+7-:8] == 8'h04 | M_temporaryMole_q[0+7-:8] == 8'h08 | M_temporaryMole_q[0+7-:8] == 8'h10 | M_temporaryMole_q[0+7-:8] == 8'h20 | M_temporaryMole_q[0+7-:8] == 8'h40 | M_temporaryMole_q[0+7-:8] == 8'h40) begin
            M_moleLeft_d = M_moleLeft_q - 1'h1;
          end else begin
            if (M_temporaryMole_q[0+7-:8] == 8'h03 | M_temporaryMole_q[0+7-:8] == 8'h05 | M_temporaryMole_q[0+7-:8] == 8'h06 | M_temporaryMole_q[0+7-:8] == 8'h09 | M_temporaryMole_q[0+7-:8] == 8'h0a | M_temporaryMole_q[0+7-:8] == 8'h0c | M_temporaryMole_q[0+7-:8] == 8'h11 | M_temporaryMole_q[0+7-:8] == 8'h12 | M_temporaryMole_q[0+7-:8] == 8'h14 | M_temporaryMole_q[0+7-:8] == 8'h18 | M_temporaryMole_q[0+7-:8] == 8'h21 | M_temporaryMole_q[0+7-:8] == 8'h22 | M_temporaryMole_q[0+7-:8] == 8'h24 | M_temporaryMole_q[0+7-:8] == 8'h28 | M_temporaryMole_q[0+7-:8] == 8'h30 | M_temporaryMole_q[0+7-:8] == 8'h41 | M_temporaryMole_q[0+7-:8] == 8'h42 | M_temporaryMole_q[0+7-:8] == 8'h44 | M_temporaryMole_q[0+7-:8] == 8'h48 | M_temporaryMole_q[0+7-:8] == 8'h50 | M_temporaryMole_q[0+7-:8] == 8'h60 | M_temporaryMole_q[0+7-:8] == 8'h81 | M_temporaryMole_q[0+7-:8] == 8'h82 | M_temporaryMole_q[0+7-:8] == 8'h84 | M_temporaryMole_q[0+7-:8] == 8'h88 | M_temporaryMole_q[0+7-:8] == 8'h90 | M_temporaryMole_q[0+7-:8] == 8'ha0 | M_temporaryMole_q[0+7-:8] == 8'hc0) begin
              if (M_moleLeft_q < 2'h2) begin
                M_moleLeft_d = 1'h0;
              end else begin
                M_moleLeft_d = M_moleLeft_q - 2'h2;
              end
            end else begin
              if (M_temporaryMole_q[0+7-:8] == 8'h07 | M_temporaryMole_q[0+7-:8] == 8'h0b | M_temporaryMole_q[0+7-:8] == 8'h0d | M_temporaryMole_q[0+7-:8] == 8'h0e | M_temporaryMole_q[0+7-:8] == 8'h13 | M_temporaryMole_q[0+7-:8] == 8'h15 | M_temporaryMole_q[0+7-:8] == 8'h16 | M_temporaryMole_q[0+7-:8] == 8'h19 | M_temporaryMole_q[0+7-:8] == 8'h1a | M_temporaryMole_q[0+7-:8] == 8'h1c | M_temporaryMole_q[0+7-:8] == 8'h23 | M_temporaryMole_q[0+7-:8] == 8'h25 | M_temporaryMole_q[0+7-:8] == 8'h26 | M_temporaryMole_q[0+7-:8] == 8'h29 | M_temporaryMole_q[0+7-:8] == 8'h2a | M_temporaryMole_q[0+7-:8] == 8'h2c | M_temporaryMole_q[0+7-:8] == 8'h31 | M_temporaryMole_q[0+7-:8] == 8'h32 | M_temporaryMole_q[0+7-:8] == 8'h34 | M_temporaryMole_q[0+7-:8] == 8'h38 | M_temporaryMole_q[0+7-:8] == 8'h43 | M_temporaryMole_q[0+7-:8] == 8'h45 | M_temporaryMole_q[0+7-:8] == 8'h46 | M_temporaryMole_q[0+7-:8] == 8'h49 | M_temporaryMole_q[0+7-:8] == 8'h4a | M_temporaryMole_q[0+7-:8] == 8'h4c | M_temporaryMole_q[0+7-:8] == 8'h51 | M_temporaryMole_q[0+7-:8] == 8'h52 | M_temporaryMole_q[0+7-:8] == 8'h54 | M_temporaryMole_q[0+7-:8] == 8'h58 | M_temporaryMole_q[0+7-:8] == 8'h61 | M_temporaryMole_q[0+7-:8] == 8'h62 | M_temporaryMole_q[0+7-:8] == 8'h64 | M_temporaryMole_q[0+7-:8] == 8'h68 | M_temporaryMole_q[0+7-:8] == 8'h70 | M_temporaryMole_q[0+7-:8] == 8'h83 | M_temporaryMole_q[0+7-:8] == 8'h85 | M_temporaryMole_q[0+7-:8] == 8'h86 | M_temporaryMole_q[0+7-:8] == 8'h89 | M_temporaryMole_q[0+7-:8] == 8'h8a | M_temporaryMole_q[0+7-:8] == 8'h8c | M_temporaryMole_q[0+7-:8] == 8'h91 | M_temporaryMole_q[0+7-:8] == 8'h92 | M_temporaryMole_q[0+7-:8] == 8'h94 | M_temporaryMole_q[0+7-:8] == 8'h98 | M_temporaryMole_q[0+7-:8] == 8'ha1 | M_temporaryMole_q[0+7-:8] == 8'ha2 | M_temporaryMole_q[0+7-:8] == 8'ha4 | M_temporaryMole_q[0+7-:8] == 8'ha8 | M_temporaryMole_q[0+7-:8] == 8'hb0 | M_temporaryMole_q[0+7-:8] == 8'hc1 | M_temporaryMole_q[0+7-:8] == 8'hc2 | M_temporaryMole_q[0+7-:8] == 8'hc4 | M_temporaryMole_q[0+7-:8] == 8'hc8 | M_temporaryMole_q[0+7-:8] == 8'hd0 | M_temporaryMole_q[0+7-:8] == 8'he0) begin
                if (M_moleLeft_q < 2'h3) begin
                  M_moleLeft_d = 1'h0;
                end else begin
                  M_moleLeft_d = M_moleLeft_q - 2'h3;
                end
              end else begin
                if (M_temporaryMole_q[0+7-:8] == 8'h0f | M_temporaryMole_q[0+7-:8] == 8'h17 | M_temporaryMole_q[0+7-:8] == 8'h1b | M_temporaryMole_q[0+7-:8] == 8'h1d | M_temporaryMole_q[0+7-:8] == 8'h1e | M_temporaryMole_q[0+7-:8] == 8'h27 | M_temporaryMole_q[0+7-:8] == 8'h2b | M_temporaryMole_q[0+7-:8] == 8'h2d | M_temporaryMole_q[0+7-:8] == 8'h2e | M_temporaryMole_q[0+7-:8] == 8'h33 | M_temporaryMole_q[0+7-:8] == 8'h35 | M_temporaryMole_q[0+7-:8] == 8'h36 | M_temporaryMole_q[0+7-:8] == 8'h39 | M_temporaryMole_q[0+7-:8] == 8'h3a | M_temporaryMole_q[0+7-:8] == 8'h3c | M_temporaryMole_q[0+7-:8] == 8'h47 | M_temporaryMole_q[0+7-:8] == 8'h4b | M_temporaryMole_q[0+7-:8] == 8'h4d | M_temporaryMole_q[0+7-:8] == 8'h4e | M_temporaryMole_q[0+7-:8] == 8'h53 | M_temporaryMole_q[0+7-:8] == 8'h55 | M_temporaryMole_q[0+7-:8] == 8'h56 | M_temporaryMole_q[0+7-:8] == 8'h59 | M_temporaryMole_q[0+7-:8] == 8'h5a | M_temporaryMole_q[0+7-:8] == 8'h5c | M_temporaryMole_q[0+7-:8] == 8'h63 | M_temporaryMole_q[0+7-:8] == 8'h65 | M_temporaryMole_q[0+7-:8] == 8'h66 | M_temporaryMole_q[0+7-:8] == 8'h69 | M_temporaryMole_q[0+7-:8] == 8'h6a | M_temporaryMole_q[0+7-:8] == 8'h6c | M_temporaryMole_q[0+7-:8] == 8'h71 | M_temporaryMole_q[0+7-:8] == 8'h72 | M_temporaryMole_q[0+7-:8] == 8'h74 | M_temporaryMole_q[0+7-:8] == 8'h78 | M_temporaryMole_q[0+7-:8] == 8'h87 | M_temporaryMole_q[0+7-:8] == 8'h8b | M_temporaryMole_q[0+7-:8] == 8'h8d | M_temporaryMole_q[0+7-:8] == 8'h8e | M_temporaryMole_q[0+7-:8] == 8'h93 | M_temporaryMole_q[0+7-:8] == 8'h95 | M_temporaryMole_q[0+7-:8] == 8'h96 | M_temporaryMole_q[0+7-:8] == 8'h99 | M_temporaryMole_q[0+7-:8] == 8'h9a | M_temporaryMole_q[0+7-:8] == 8'h9c | M_temporaryMole_q[0+7-:8] == 8'ha3 | M_temporaryMole_q[0+7-:8] == 8'ha5 | M_temporaryMole_q[0+7-:8] == 8'ha6 | M_temporaryMole_q[0+7-:8] == 8'ha9 | M_temporaryMole_q[0+7-:8] == 8'haa | M_temporaryMole_q[0+7-:8] == 8'hac | M_temporaryMole_q[0+7-:8] == 8'hb1 | M_temporaryMole_q[0+7-:8] == 8'hb2 | M_temporaryMole_q[0+7-:8] == 8'hb4 | M_temporaryMole_q[0+7-:8] == 8'hb8 | M_temporaryMole_q[0+7-:8] == 8'hc3 | M_temporaryMole_q[0+7-:8] == 8'hc5 | M_temporaryMole_q[0+7-:8] == 8'hc6 | M_temporaryMole_q[0+7-:8] == 8'hc9 | M_temporaryMole_q[0+7-:8] == 8'hca | M_temporaryMole_q[0+7-:8] == 8'hcc | M_temporaryMole_q[0+7-:8] == 8'hd1 | M_temporaryMole_q[0+7-:8] == 8'hd2 | M_temporaryMole_q[0+7-:8] == 8'hd4 | M_temporaryMole_q[0+7-:8] == 8'hd8 | M_temporaryMole_q[0+7-:8] == 8'he1 | M_temporaryMole_q[0+7-:8] == 8'he2 | M_temporaryMole_q[0+7-:8] == 8'he4 | M_temporaryMole_q[0+7-:8] == 8'he8 | M_temporaryMole_q[0+7-:8] == 8'hf0) begin
                  if (M_moleLeft_q < 3'h4) begin
                    M_moleLeft_d = 1'h0;
                  end else begin
                    M_moleLeft_d = M_moleLeft_q - 3'h4;
                  end
                end else begin
                  if (M_temporaryMole_q[0+7-:8] == 8'h1f | M_temporaryMole_q[0+7-:8] == 8'h2f | M_temporaryMole_q[0+7-:8] == 8'h37 | M_temporaryMole_q[0+7-:8] == 8'h3b | M_temporaryMole_q[0+7-:8] == 8'h3d | M_temporaryMole_q[0+7-:8] == 8'h3e | M_temporaryMole_q[0+7-:8] == 8'h4f | M_temporaryMole_q[0+7-:8] == 8'h57 | M_temporaryMole_q[0+7-:8] == 8'h5b | M_temporaryMole_q[0+7-:8] == 8'h5d | M_temporaryMole_q[0+7-:8] == 8'h5e | M_temporaryMole_q[0+7-:8] == 8'h67 | M_temporaryMole_q[0+7-:8] == 8'h6b | M_temporaryMole_q[0+7-:8] == 8'h6d | M_temporaryMole_q[0+7-:8] == 8'h6e | M_temporaryMole_q[0+7-:8] == 8'h73 | M_temporaryMole_q[0+7-:8] == 8'h75 | M_temporaryMole_q[0+7-:8] == 8'h76 | M_temporaryMole_q[0+7-:8] == 8'h79 | M_temporaryMole_q[0+7-:8] == 8'h7a | M_temporaryMole_q[0+7-:8] == 8'h7c | M_temporaryMole_q[0+7-:8] == 8'h8f | M_temporaryMole_q[0+7-:8] == 8'h97 | M_temporaryMole_q[0+7-:8] == 8'h9b | M_temporaryMole_q[0+7-:8] == 8'h9d | M_temporaryMole_q[0+7-:8] == 8'h9e | M_temporaryMole_q[0+7-:8] == 8'ha7 | M_temporaryMole_q[0+7-:8] == 8'hab | M_temporaryMole_q[0+7-:8] == 8'had | M_temporaryMole_q[0+7-:8] == 8'hae | M_temporaryMole_q[0+7-:8] == 8'hb3 | M_temporaryMole_q[0+7-:8] == 8'hb5 | M_temporaryMole_q[0+7-:8] == 8'hb6 | M_temporaryMole_q[0+7-:8] == 8'hb9 | M_temporaryMole_q[0+7-:8] == 8'hba | M_temporaryMole_q[0+7-:8] == 8'hbc | M_temporaryMole_q[0+7-:8] == 8'hc7 | M_temporaryMole_q[0+7-:8] == 8'hcb | M_temporaryMole_q[0+7-:8] == 8'hcd | M_temporaryMole_q[0+7-:8] == 8'hce | M_temporaryMole_q[0+7-:8] == 8'hd3 | M_temporaryMole_q[0+7-:8] == 8'hd5 | M_temporaryMole_q[0+7-:8] == 8'hd6 | M_temporaryMole_q[0+7-:8] == 8'hd9 | M_temporaryMole_q[0+7-:8] == 8'hda | M_temporaryMole_q[0+7-:8] == 8'hdc | M_temporaryMole_q[0+7-:8] == 8'he3 | M_temporaryMole_q[0+7-:8] == 8'he5 | M_temporaryMole_q[0+7-:8] == 8'he6 | M_temporaryMole_q[0+7-:8] == 8'he9 | M_temporaryMole_q[0+7-:8] == 8'hea | M_temporaryMole_q[0+7-:8] == 8'hec | M_temporaryMole_q[0+7-:8] == 8'hf1 | M_temporaryMole_q[0+7-:8] == 8'hf2 | M_temporaryMole_q[0+7-:8] == 8'hf4 | M_temporaryMole_q[0+7-:8] == 8'hf8) begin
                    if (M_moleLeft_q < 3'h5) begin
                      M_moleLeft_d = 1'h0;
                    end else begin
                      M_moleLeft_d = M_moleLeft_q - 3'h5;
                    end
                  end else begin
                    if (M_temporaryMole_q[0+7-:8] == 8'h3f | M_temporaryMole_q[0+7-:8] == 8'h5f | M_temporaryMole_q[0+7-:8] == 8'h6f | M_temporaryMole_q[0+7-:8] == 8'h77 | M_temporaryMole_q[0+7-:8] == 8'h7b | M_temporaryMole_q[0+7-:8] == 8'h7d | M_temporaryMole_q[0+7-:8] == 8'h7e | M_temporaryMole_q[0+7-:8] == 8'h9f | M_temporaryMole_q[0+7-:8] == 8'haf | M_temporaryMole_q[0+7-:8] == 8'hb7 | M_temporaryMole_q[0+7-:8] == 8'hbb | M_temporaryMole_q[0+7-:8] == 8'hbd | M_temporaryMole_q[0+7-:8] == 8'hbe | M_temporaryMole_q[0+7-:8] == 8'hcf | M_temporaryMole_q[0+7-:8] == 8'hd7 | M_temporaryMole_q[0+7-:8] == 8'hdb | M_temporaryMole_q[0+7-:8] == 8'hdd | M_temporaryMole_q[0+7-:8] == 8'hde | M_temporaryMole_q[0+7-:8] == 8'he7 | M_temporaryMole_q[0+7-:8] == 8'heb | M_temporaryMole_q[0+7-:8] == 8'hed | M_temporaryMole_q[0+7-:8] == 8'hee | M_temporaryMole_q[0+7-:8] == 8'hf3 | M_temporaryMole_q[0+7-:8] == 8'hf5 | M_temporaryMole_q[0+7-:8] == 8'hf6 | M_temporaryMole_q[0+7-:8] == 8'hf9 | M_temporaryMole_q[0+7-:8] == 8'hfa | M_temporaryMole_q[0+7-:8] == 8'hfc) begin
                      if (M_moleLeft_q < 3'h6) begin
                        M_moleLeft_d = 1'h0;
                      end else begin
                        M_moleLeft_d = M_moleLeft_q - 3'h6;
                      end
                    end else begin
                      if (M_temporaryMole_q[0+7-:8] == 8'h7f | M_temporaryMole_q[0+7-:8] == 8'hbf | M_temporaryMole_q[0+7-:8] == 8'hdf | M_temporaryMole_q[0+7-:8] == 8'hef | M_temporaryMole_q[0+7-:8] == 8'hf7 | M_temporaryMole_q[0+7-:8] == 8'hfb | M_temporaryMole_q[0+7-:8] == 8'hfd | M_temporaryMole_q[0+7-:8] == 8'hfe) begin
                        if (M_moleLeft_q < 3'h7) begin
                          M_moleLeft_d = 1'h0;
                        end else begin
                          M_moleLeft_d = M_moleLeft_q - 3'h7;
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        if (M_score_q < 3'h5) begin
          M_oState_d = LEVEL1_oState;
        end else begin
          if (M_score_q < 5'h1e) begin
            M_oState_d = LEVEL2_oState;
          end else begin
            if (M_score_q < 6'h3c) begin
              M_oState_d = LEVEL3_oState;
            end else begin
              M_oState_d = LEVEL4_oState;
            end
          end
        end
      end
      LEVEL1_oState: begin
        if (M_timeCounter_q <= 7'h01) begin
          M_getRdmNum_d = 1'h1;
          M_oState_d = START_oState;
        end else begin
          if (M_moleLeft_q == 8'h00) begin
            M_oState_d = END_oState;
          end else begin
            if (button[0+7-:8] != 1'h0) begin
              M_oState_d = CHECK_oState;
            end else begin
              M_oState_d = LEVEL1_oState;
            end
          end
        end
      end
      LEVEL2_oState: begin
        if (M_timeCounter_q <= 7'h01) begin
          M_getRdmNum_d = 1'h1;
          M_oState_d = START_oState;
        end else begin
          if (M_moleLeft_q == 8'h00) begin
            M_oState_d = END_oState;
          end else begin
            if (button[0+7-:8] != 1'h0) begin
              M_oState_d = CHECK_oState;
            end else begin
              M_oState_d = LEVEL2_oState;
            end
          end
        end
      end
      LEVEL3_oState: begin
        if (M_timeCounter_q <= 7'h05) begin
          M_getRdmNum_d = 1'h1;
          M_oState_d = START_oState;
        end else begin
          if (M_moleLeft_q == 8'h00) begin
            M_oState_d = END_oState;
          end else begin
            if (button[0+7-:8] != 1'h0) begin
              M_oState_d = CHECK_oState;
            end else begin
              M_oState_d = LEVEL3_oState;
            end
          end
        end
      end
      LEVEL4_oState: begin
        if (M_timeCounter_q <= 7'h0a) begin
          M_getRdmNum_d = 1'h1;
          M_oState_d = START_oState;
        end else begin
          if (M_moleLeft_q == 8'h00) begin
            M_oState_d = END_oState;
          end else begin
            if (button[0+7-:8] != 1'h0) begin
              M_oState_d = CHECK_oState;
            end else begin
              M_oState_d = LEVEL4_oState;
            end
          end
        end
      end
      CHECK_oState: begin
        for (i = 1'h0; i < 4'h8; i = i + 1) begin
          if (M_led_pattern_q[(i)*1+0-:1] == 1'h1 && M_buttons_button_pressed[(i)*1+0-:1] == 1'h1) begin
            M_led_pattern_d[(i)*1+0-:1] = 1'h0;
            M_alumux_score = M_score_q;
            M_alumux_scoreaddc = 4'h1;
            M_alumux_asel = 4'h0;
            M_alumux_bsel = 4'h0;
            M_score_d = M_alumux_out[0+3-:4];
          end
        end
        if (M_score_q < 3'h5) begin
          M_oState_d = LEVEL1_oState;
        end else begin
          if (M_score_q < 5'h1e) begin
            M_oState_d = LEVEL2_oState;
          end else begin
            if (M_score_q < 6'h3c) begin
              M_oState_d = LEVEL3_oState;
            end else begin
              M_oState_d = LEVEL4_oState;
            end
          end
        end
      end
      END_oState: begin
        M_led_pattern_d = 8'h00;
        M_getRdmNum_d = 1'h0;
        M_gameInitializer_d = 1'h0;
        if (M_buttons_button_pressed != 8'h00) begin
          M_oState_d = RESET_oState;
        end
      end
      RESET_oState: begin
        M_led_pattern_d = 8'h00;
        M_getRdmNum_d = 1'h0;
        M_gameInitializer_d = 1'h0;
        if (M_buttons_button_pressed[2+0-:1] == 1'h1) begin
          M_score_d = 1'h0;
          M_moleLeft_d = 8'h63;
          M_gameInitializer_d = 1'h1;
          M_temporaryMole_d = 8'h00;
          M_timeCounter_d = 4'ha;
          M_oState_d = INITIAL_oState;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_halfsecond_q <= 1'h0;
      M_oState_q <= 1'h0;
    end else begin
      M_halfsecond_q <= M_halfsecond_d;
      M_oState_q <= M_oState_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_timeCounter_q <= 5'h14;
    end else begin
      M_timeCounter_q <= M_timeCounter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_led_pattern_q <= 1'h0;
      M_temporaryMole_q <= 1'h0;
      M_gameInitializer_q <= 1'h1;
      M_buttonArray_q <= 1'h0;
      M_score_q <= 1'h0;
      M_moleLeft_q <= 7'h63;
      M_getRdmNum_q <= 1'h1;
    end else begin
      M_led_pattern_q <= M_led_pattern_d;
      M_temporaryMole_q <= M_temporaryMole_d;
      M_gameInitializer_q <= M_gameInitializer_d;
      M_buttonArray_q <= M_buttonArray_d;
      M_score_q <= M_score_d;
      M_moleLeft_q <= M_moleLeft_d;
      M_getRdmNum_q <= M_getRdmNum_d;
    end
  end
  
endmodule
