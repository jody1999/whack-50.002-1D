/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module combinedALU_12 (
    input [15:0] a,
    input [15:0] b,
    input [5:0] alufn,
    output reg [3:0] first,
    output reg [3:0] second,
    output reg [3:0] third,
    output reg [3:0] fourth,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n,
    output reg [7:0] led
  );
  
  
  
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  reg [2-1:0] M_add_alufn;
  adder_16bits_22 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .out(M_add_out),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  wire [16-1:0] M_cmp_out;
  reg [6-1:0] M_cmp_alufn;
  reg [16-1:0] M_cmp_a;
  reg [16-1:0] M_cmp_b;
  compare_16bits_23 cmp (
    .alufn(M_cmp_alufn),
    .a(M_cmp_a),
    .b(M_cmp_b),
    .out(M_cmp_out)
  );
  
  wire [16-1:0] M_shf_out;
  reg [16-1:0] M_shf_a;
  reg [16-1:0] M_shf_b;
  reg [6-1:0] M_shf_alufn;
  shift_16bits_24 shf (
    .a(M_shf_a),
    .b(M_shf_b),
    .alufn(M_shf_alufn),
    .out(M_shf_out)
  );
  
  wire [16-1:0] M_bool_out;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  reg [6-1:0] M_bool_alufn;
  boolean_16bits_25 bool (
    .a(M_bool_a),
    .b(M_bool_b),
    .alufn(M_bool_alufn),
    .out(M_bool_out)
  );
  
  wire [16-1:0] M_mul_out;
  reg [16-1:0] M_mul_a;
  reg [16-1:0] M_mul_b;
  reg [6-1:0] M_mul_alufn;
  multiplier_16bits_26 mul (
    .a(M_mul_a),
    .b(M_mul_b),
    .alufn(M_mul_alufn),
    .out(M_mul_out)
  );
  
  wire [16-1:0] M_mod_out;
  reg [16-1:0] M_mod_a;
  reg [16-1:0] M_mod_b;
  reg [6-1:0] M_mod_alufn;
  mod_16_27 mod (
    .a(M_mod_a),
    .b(M_mod_b),
    .alufn(M_mod_alufn),
    .out(M_mod_out)
  );
  
  wire [1-1:0] M_zvn_z;
  wire [1-1:0] M_zvn_v;
  wire [1-1:0] M_zvn_n;
  reg [16-1:0] M_zvn_a;
  reg [16-1:0] M_zvn_b;
  reg [6-1:0] M_zvn_alufn;
  reg [16-1:0] M_zvn_out;
  getZVN_28 zvn (
    .a(M_zvn_a),
    .b(M_zvn_b),
    .alufn(M_zvn_alufn),
    .out(M_zvn_out),
    .z(M_zvn_z),
    .v(M_zvn_v),
    .n(M_zvn_n)
  );
  
  always @* begin
    out = 1'h0;
    led[0+2-:3] = 1'h0;
    M_add_a = a;
    M_add_b = b;
    M_add_alufn = alufn[0+1-:2];
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn;
    M_shf_a = a;
    M_shf_b = b;
    M_shf_alufn = alufn;
    M_zvn_a = a;
    M_zvn_b = b;
    M_zvn_alufn = alufn;
    M_zvn_out = M_add_out;
    z = M_zvn_z;
    v = M_zvn_v;
    n = M_zvn_n;
    M_cmp_a = a;
    M_cmp_b = b;
    M_cmp_alufn = alufn;
    M_mul_a = a;
    M_mul_b = b;
    M_mul_alufn = alufn;
    M_mod_a = a;
    M_mod_b = b;
    M_mod_alufn = alufn;
    first = 4'h0;
    second = 4'h0;
    third = 4'h0;
    fourth = 4'h0;
    if (alufn[0+5-:6] != 6'h00 & alufn[0+5-:6] != 6'h01 & alufn[0+5-:6] != 6'h18 & alufn[0+5-:6] != 6'h1e & alufn[0+5-:6] != 6'h16 & alufn[0+5-:6] != 6'h1a & alufn[0+5-:6] != 6'h19 & alufn[0+5-:6] != 6'h20 & alufn[0+5-:6] != 6'h21 & alufn[0+5-:6] != 6'h23 & alufn[0+5-:6] != 6'h23 & alufn[0+5-:6] != 6'h35 & alufn[0+5-:6] != 6'h37 & alufn[0+5-:6] != 6'h02 & alufn[0+5-:6] != 6'h03 & alufn[0+5-:6] != 6'h33 & alufn[0+5-:6] != 6'h07) begin
      first = 4'hf;
      second = 4'hf;
      third = 4'hf;
      fourth = 4'hf;
    end else begin
      
      case (alufn[0+5-:6])
        6'h00: begin
          first = 4'h1;
          second = 4'h4;
          third = 4'h4;
          out = M_add_out;
          led[0+0-:1] = M_add_z;
          led[1+0-:1] = M_add_v;
          led[2+0-:1] = M_add_n;
        end
        6'h01: begin
          first = 4'hd;
          second = 4'he;
          third = 4'h2;
          out = M_add_out;
          led[0+0-:1] = M_add_z;
          led[1+0-:1] = M_add_v;
          led[2+0-:1] = M_add_n;
        end
        6'h18: begin
          first = 4'h1;
          second = 4'h9;
          third = 4'h4;
          out = M_bool_out;
        end
        6'h1e: begin
          first = 4'ha;
          second = 4'hc;
          third = 1'h0;
          out = M_bool_out;
        end
        6'h16: begin
          first = 4'hf;
          second = 4'ha;
          third = 4'hc;
          out = M_bool_out;
        end
        6'h1a: begin
          first = 4'h7;
          second = 4'h4;
          third = 4'hc;
          out = M_bool_out;
        end
        6'h19: begin
          first = 4'hf;
          second = 4'h9;
          third = 4'ha;
          fourth = 4'hc;
          out = M_bool_out;
        end
        6'h20: begin
          first = 4'hd;
          second = 4'h6;
          third = 4'h7;
          out = M_shf_out;
        end
        6'h21: begin
          first = 4'hd;
          second = 4'h6;
          third = 4'hc;
          out = M_shf_out;
        end
        6'h23: begin
          first = 4'hd;
          second = 4'hc;
          third = 4'h1;
          out = M_shf_out;
        end
        6'h33: begin
          first = 4'h3;
          second = 4'h5;
          third = 4'ha;
          out = M_cmp_out;
        end
        6'h35: begin
          first = 4'h3;
          second = 4'h7;
          third = 1'h0;
          out = M_cmp_out;
        end
        6'h37: begin
          first = 4'h3;
          second = 4'h7;
          third = 4'h5;
          out = M_cmp_out;
        end
        6'h02: begin
          first = 4'h8;
          second = 4'he;
          third = 4'h7;
          out = M_mul_out;
        end
        6'h03: begin
          if (b == 1'h0) begin
            first = 4'hf;
            second = 4'hf;
            third = 4'hf;
            fourth = 4'hf;
            out = M_mul_out;
          end else begin
            first = 4'h4;
            second = 4'h4;
            third = 4'h5;
            out = M_mul_out;
          end
        end
        6'h07: begin
          if (b == 1'h0) begin
            first = 4'hf;
            second = 4'hf;
            third = 4'hf;
            fourth = 4'hf;
            out = M_mod_out;
          end else begin
            first = 4'h8;
            second = 4'ha;
            third = 4'h4;
            out = M_mod_out;
          end
        end
        default: begin
          out = 16'h0000;
        end
      endcase
    end
  end
endmodule
